<Window x:Class="AgsEventAdder.MainWindow"
        x:Name="MainWindowN"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:AgsEventAdder"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="AGS Game Event Adder" 
        Height="450" Width="1000"
        Closing="Window_Closing">
    <Window.Resources>
        <sys:Double x:Key="FullLineHeight">25</sys:Double>
        <sys:Double x:Key="LineHeight">20</sys:Double>
        <sys:Double x:Key="VerticalSpacer">10</sys:Double>
        <sys:Double x:Key="HorizontalSpacer">10</sys:Double>
        <sys:Boolean x:Key="GameOpen">False</sys:Boolean>
        <sys:String x:Key="DiscrepanciesSym">💥</sys:String>
        <sys:String x:Key="HasChangesPendingSym">✍</sys:String>
        <local:CollapsedWhenNullConverter x:Key="CollapsedWhenNull" />
        <local:CollapsedWhenEmptyConverter x:Key="CollapsedWhenEmpty" />
        <local:CollapsedWhenFalseConverter x:Key="CollapsedWhenFalse" />
        <local:CollapsedWhenTrueConverter x:Key="CollapsedWhenTrue" />
        <local:HiddenWhenTrueConverter x:Key="HiddenWhenTrue" />
        <local:CollapsedWhen0Converter x:Key="CollapsedWhen0" />
        <local:HiddenWhenInCodeMConverter x:Key="HiddenWhenInCode" />

        <!-- Make Grid header texts left-aligned -->
        <Style TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="HorizontalContentAlignment" Value="Left" />
        </Style>
        <!-- Data grids get a handler that lets users unselect a selected line by left-clicking on it.-->
        <Style TargetType="DataGrid">
            <EventSetter Event="PreviewMouseLeftButtonDown" Handler="DataGrid_PreviewMouseLeftButtonDown"/>
        </Style>
        <!-- A "Not in code" symbol -->
        <Grid x:Key="NotInCode" x:Shared="False">
            <TextBlock Text="🧾"/>
            <TextBlock Text="❌" Panel.ZIndex="1"/>
        </Grid>
        <!-- An "Add stub to code" symbol -->
        <Grid x:Key="AddToCode" x:Shared="False">
            <TextBlock Text="🧾"/>
            <TextBlock Text="➕" Panel.ZIndex="1"/>
        </Grid>
        <!-- This gory ~140 lines blob of code is needed in order to have TreeViews
             behave as they ought to behave, as far as alignment is concerned.
             NOTE! They claim that this awfulness would "not be too bad" (!!)
        
             XAML is all about getting wonderfully readable, extremely clear 
             UI code where you can always zoom in on exactly what you need to 
             know and arrive instantly. It's the holy grail of UI and soooo much
             better than programming code. You know. -->
        <Style TargetType="TreeViewItem"
                BasedOn="{StaticResource {x:Type TreeViewItem}}">
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TreeViewItem">
                        <StackPanel>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"
                                MinWidth="19" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <ToggleButton IsChecked="{Binding Path=IsExpanded, 
                                                            RelativeSource={RelativeSource TemplatedParent}}"
                                                ClickMode="Press"
                                                Name="Expander">
                                    <ToggleButton.Style>
                                        <Style TargetType="ToggleButton">
                                            <Setter Property="UIElement.Focusable" Value="false" />
                                            <Setter Property="FrameworkElement.Width" Value="16" />
                                            <Setter Property="FrameworkElement.Height" Value="16" />
                                            <Setter Property="Control.Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ToggleButton">
                                                        <Border Padding="5,5,5,5"
                                                                Background="#00FFFFFF"
                                                                Width="16"
                                                                Height="16">
                                                            <Path Fill="#00FFFFFF"
                                                                Stroke="#FF989898"
                                                                Name="ExpandPath">
                                                                <Path.Data>
                                                                    <PathGeometry Figures="M0,0L0,6L6,0z" />
                                                                </Path.Data>
                                                                <Path.RenderTransform>
                                                                    <RotateTransform Angle="135"
                                                                                       CenterX="3"
                                                                                       CenterY="3" />
                                                                </Path.RenderTransform>
                                                            </Path>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="UIElement.IsMouseOver"
                                                                     Value="True">
                                                                <Setter TargetName="ExpandPath"
                                                                        Property="Shape.Stroke"
                                                                        Value="#FF1BBBFA" />
                                                                <Setter TargetName="ExpandPath"
                                                                        Property="Shape.Fill"
                                                                        Value="#00FFFFFF" />
                                                            </Trigger>
                                                            <Trigger Property="ToggleButton.IsChecked"
                                                                     Value="True">
                                                                <Setter TargetName="ExpandPath"
                                                                        Property="UIElement.RenderTransform">
                                                                    <Setter.Value>
                                                                        <RotateTransform Angle="180"
                                                                         CenterX="3"
                                                                         CenterY="3" />
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter TargetName="ExpandPath"
                                                                        Property="Shape.Fill"
                                                                        Value="#FF595959" />
                                                                <Setter TargetName="ExpandPath"
                                                                        Property="Shape.Stroke"
                                                                        Value="#FF262626" />
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                                <Border x:Name="Bd"
                                        HorizontalAlignment="Stretch"
                                        BorderThickness="{TemplateBinding Border.BorderThickness}"
                                        BorderBrush="{TemplateBinding Border.BorderBrush}"
                                        Padding="{TemplateBinding Control.Padding}"
                                        Background="{TemplateBinding Panel.Background}"
                                        SnapsToDevicePixels="True"
                                        Grid.Column="1">
                                    <ContentPresenter x:Name="PART_Header"
                                                        Content="{TemplateBinding HeaderedContentControl.Header}"
                                                        ContentTemplate="{TemplateBinding 
                                                            HeaderedContentControl.HeaderTemplate}"
                                                        ContentStringFormat="{TemplateBinding 
                                                            HeaderedItemsControl.HeaderStringFormat}"
                                                        ContentTemplateSelector="{TemplateBinding 
                                                            HeaderedItemsControl.HeaderTemplateSelector}"
                                                        ContentSource="Header"
                                                        HorizontalAlignment="{TemplateBinding 
                                                            Control.HorizontalContentAlignment}"
                                                        SnapsToDevicePixels="{TemplateBinding 
                                                            UIElement.SnapsToDevicePixels}" />
                                </Border>
                                <ItemsPresenter x:Name="ItemsHost"
                                                Grid.Column="1"
                                                Grid.Row="1" />
                            </Grid>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="TreeViewItem.IsExpanded" Value="False">
                                <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="ItemsControl.HasItems" Value="False">
                                <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden" />
                            </Trigger>
                            <Trigger Property="TreeViewItem.IsSelected" Value="True">
                                <Setter TargetName="Bd" Property="Panel.Background"
                                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <Setter Property="TextElement.Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="TreeViewItem.IsSelected" Value="True" />
                                    <Condition Property="Selector.IsSelectionActive" Value="False" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd" Property="Panel.Background"
                                        Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                                <Setter Property="TextElement.Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                            </MultiTrigger>
                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" 
                                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style
>
    </Window.Resources>
    
    <Grid>
        <Grid.Margin>
            <Thickness Left="10" Right="10" Bottom="{StaticResource VerticalSpacer}"/>
        </Grid.Margin>
        <Grid.RowDefinitions>
            <!-- Game name, description, buttons-->
            <RowDefinition Height="Auto"/>
            <!-- Errors when opening game -->
            <RowDefinition Height="Auto"/>
            <!-- Pending changes -->
            <RowDefinition Height="Auto"/>
            <!-- Work area (Overview + work grid) -->
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Label x:Name="GamePathLabel" 
               Target="{Binding ElementName=GamePathTxt}"
               Content="_Game"
               Grid.Row="0" Grid.Column="0"/>
        <DockPanel Grid.Row="0"  Grid.Column="1">
            <TextBox x:Name="GamePathTxt"
             Text=""
             FontFamily="./Fonts/#DM Mono"
             TextChanged="GamePathTxt_TextChanged"
             LostFocus="GamePathTxt_LostFocus"
             GotKeyboardFocus="GamePathTxt_GotKeyboardFocus"
             VerticalAlignment="Center"
             MinWidth="300"
             MaxWidth="500">
                <TextBox.Resources>
                    <sys:String x:Key="Prompt">(Enter Path to .ags file)</sys:String>
                </TextBox.Resources>
            </TextBox>
            <Button x:Name="GamePathTxtReturnBtn" 
            Content="⏎" 
            Visibility="{Binding ElementName=GamePathTxt,Path=IsFocused,Converter={StaticResource CollapsedWhenFalse}}"
            Height="{StaticResource LineHeight}"/>
            <Button x:Name="GamePathBrowseBtn"
            Content="Browse"
            Click="GamePathBrowseBtn_Click"
            Height="{StaticResource LineHeight}"/>
            <TextBlock x:Name="GameDescBlock"
                Text=""
                VerticalAlignment="Center"
                Margin="10,0,0,0"/>
        </DockPanel>
        <TextBlock x:Name="GamePathErrorTxt"
           Grid.Row="1" Grid.Column="1" 
           Text=""
           Visibility="{Binding ElementName=GamePathErrorTxt,Path=Text,Converter={StaticResource CollapsedWhenEmpty}}"
           TextWrapping="Wrap">
            <TextBlock.Resources>
                <sys:String x:Key="Default">ERROR: Cannot open or access</sys:String>
            </TextBlock.Resources>
        </TextBlock>
        <DockPanel Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2"
                   Visibility="{Binding ChangesPending, Converter={StaticResource CollapsedWhen0}}">
            <DockPanel.Margin>
                <Thickness Top="{StaticResource VerticalSpacer}" Bottom="{StaticResource VerticalSpacer}"/>
            </DockPanel.Margin>
            <DockPanel.Resources>
                <Style TargetType="Button">
                    <Setter Property="Padding" Value="5"/>
                </Style>
            </DockPanel.Resources>
            <Button x:Name="CommitAll" Click="CommitAll_Click">
                <Button.Margin>
                    <Thickness Right="{StaticResource HorizontalSpacer}"/>
                </Button.Margin>
                <TextBlock>
                    <Run Text="💾"/>
                    <Run Text=" Write "/>
                    <Run Text="{Binding ChangesPending}" Foreground="Red" FontWeight="Bold"/>
                    <Run Text=" change(s) to file"/>
                </TextBlock>
            </Button>
            <Button x:Name="RejectAll" Click="RejectAll_Click">
                <TextBlock>
                    <Run Text="🗑️"/>
                    <Run Text=" Discard "/>
                    <Run Text="{Binding ChangesPending}" Foreground="Red" FontWeight="Bold"/>
                    <Run Text=" change(s)"/>  
                </TextBlock>
            </Button>
            <Label/>
        </DockPanel>
                    
        <!-- 'Source={x:Static Application.Current}' yields errors.
             WPF is struggling to resolve Application.Current as a static property, 
             which makes sense because Application.Current is an instance property, 
             not a static one. 
             There is no way to name the App in XAML either: "x:Name" doesn't work
             for 'App' specifically, for which WPF makes the excuse that App is not 
             a "visual element". So the only way out is setting the data context in
             code behind. Afterwards, automatic field selection doesn't work in the
             Visual editor, which is disconcerting, but '{Binding AgsGame …}' 
             works anyway. -->
        <Grid x:Name="ProcessingGameGrid"
                    Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2"
                    Visibility="{Binding AgsGame, Converter={StaticResource CollapsedWhenNull}}">
            <Grid.Resources>
                <ContextMenu x:Key="FactsColumnCtxMenu">
                    <MenuItem Header="Insert default events and add to code wherever empty"
                              Click="FactsColumn_AddDefaultEvents_Click"/>
                    <MenuItem Header="Add stubs to code whenever events are missing there"
                              Click="FactsColumn_AddMissingEventsToCode_Click"/>
                    <MenuItem Header="Clear events whenever missing in code"
                              Click="FactsColumn_ClearEventsWithoutCode_Click"/>
                    <MenuItem Header="Cancel all pending changes"
                              Click="FactsColumn_CancelAllPendingChanges_Click"/>
                </ContextMenu>
                <ContextMenu x:Key="FactsCellCtxMenu"
                             Opened="FactsCellCtxMenu_Opened">
                    <MenuItem x:Name="FactsCellCtxItem_ChangeToDefaultAddStub"
                              Click="FactsCell_ChangeToDefaultAddStub_Click">
                        <MenuItem.Resources>
                            <sys:String x:Key="header">Change to '{0}' and add stub to code</sys:String>
                        </MenuItem.Resources>
                    </MenuItem>
                    <MenuItem x:Name="FactsCellCtxItem_ChangeToDefault"
                              Click="FactsCell_ChangeToDefaultEvent_Click">
                        <MenuItem.Resources>
                            <sys:String x:Key="header">Change to '{0}'</sys:String>
                        </MenuItem.Resources>
                    </MenuItem>
                    <MenuItem x:Name="FactsCellCtxItem_ChangeToCurrent"
                              Click="FactsCell_ChangeToCurrentEvent_Click">
                        <MenuItem.Resources>
                            <sys:String x:Key="header">Change back to '{0}'</sys:String>
                        </MenuItem.Resources>
                    </MenuItem>
                    <MenuItem x:Name="FactsCellCtxItem_AddStub"
                              Click="FactsCell_AddMissingStubToCode_Click">
                        <MenuItem.Resources>
                            <sys:String x:Key="header">Add stub '{0}' to code</sys:String>
                        </MenuItem.Resources>
                    </MenuItem>
                    <MenuItem x:Name="FactsCellCtxItem_NoAddStub"
                              Click="FactsCell_DontAddStubToCode_Click">
                        <MenuItem.Resources>
                            <sys:String x:Key="header">Don't add stub '{0}' to code</sys:String>
                        </MenuItem.Resources>
                    </MenuItem>
                    <MenuItem x:Name="FactsCellCtxItem_ClearEvent"
                              Click="FactsCell_ClearEvent_Click">
                        <MenuItem.Resources>
                            <sys:String x:Key="header">"Clear this event"</sys:String>
                        </MenuItem.Resources>
                    </MenuItem>
                    <MenuItem x:Name="FactsCellCtxItem_CancelPendingChanges"
                              Click="FactsCell_CancelPendingChanges_Click">
                        <MenuItem.Resources>
                            <sys:String x:Key="header">Cancel pending changes</sys:String>
                        </MenuItem.Resources>
                    </MenuItem>
                </ContextMenu>
                
            </Grid.Resources>
            <!-- Exactly 1 entry should be visible at all times -->
            <Grid x:Name="OverviewGrid" Grid.Row="0" 
                          Visibility="Visible">
                <Grid.RowDefinitions>
                    <!-- Header changes -->
                    <RowDefinition Height="Auto"/>
                    <!-- Treeview -->
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <TextBlock Grid.Row="0"  
                           HorizontalAlignment="Center">
                    <TextBlock.Margin>
                        <Thickness Bottom="{StaticResource VerticalSpacer}"/>
                    </TextBlock.Margin>
                    <Run Text="Overview"/>
                </TextBlock>
                <TreeView x:Name="OverviewTV"
                          Grid.Row="1">
                    <TreeView.Resources>
                        <!-- The sequence of declarations is important here, without any good reason.
                             "<DataTemplate …> must come _first_, only then can 
                             "<HierarchicalDataTemplate …>" follow. Otherwise, you'll get a 
                             nonsensical error message that doesn't help pinpointing the core problem. -->
                        <DataTemplate DataType="{x:Type local:OverviewItem}">
                            <ListViewItem
                                HorizontalContentAlignment="Left"
                                MouseDoubleClick="OverviewTV_MouseDoubleClick">
                                <StackPanel Orientation="Horizontal" >
                                    <TextBlock>
                                        <Run Text="{Binding Icon, Mode=OneWay}" />
                                        <Run Text=" "/>
                                        <Run Text="{Binding Name, Mode=OneWay}" />
                                    </TextBlock>
                                    <TextBlock Visibility="{Binding DiscrepancyCount, Converter={StaticResource CollapsedWhen0}}">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Setter Property="FontWeight" Value="Bold"/>
                                                <Setter Property="Foreground" Value="Red"/>
                                            </Style>
                                        </TextBlock.Style>
                                         <Run Text=" – "/>
                                         <Run Text="{StaticResource DiscrepanciesSym}"/>
                                         <Run Text="{Binding DiscrepancyCount, Mode=OneWay}"/>
                                    </TextBlock>
                                    <TextBlock Visibility="{Binding ChangesPending, Mode=OneWay, Converter={StaticResource CollapsedWhen0}}">
                                        <Run Text=" – "/>
                                        <Run Text="{StaticResource HasChangesPendingSym}" />
                                        <Run Text="{Binding ChangesPending, Mode=OneWay}" />
                                    </TextBlock>
                                </StackPanel>
                            </ListViewItem>
                        </DataTemplate>
                        <HierarchicalDataTemplate DataType="{x:Type local:OverviewFolder}"  
                            ItemsSource="{Binding Items}">
                            <StackPanel 
                                HorizontalAlignment="Left"
                                Orientation="Horizontal">
                                <TextBlock Text="{Binding Name, Mode=OneWay}" />
                                <TextBlock Visibility="{Binding DiscrepancyCount, Converter={StaticResource CollapsedWhen0}}">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="FontWeight" Value="Bold"/>
                                            <Setter Property="Foreground" Value="Red"/>
                                        </Style>
                                    </TextBlock.Style>
                                    <Run Text=" – "/>
                                    <Run Text="{StaticResource DiscrepanciesSym}"/>
                                    <Run Text="{Binding DiscrepancyCount, Mode=OneWay}"/>
                                </TextBlock>
                            </StackPanel>
                        </HierarchicalDataTemplate>
                        <HierarchicalDataTemplate DataType="{x:Type local:OverviewRoom}"  
                            ItemsSource="{Binding Items}">
                            <StackPanel  
                                HorizontalAlignment="Left"
                                Orientation="Horizontal">
                                <TextBlock>
                                    <Run Text="Room"/>
                                    <Run Text="{Binding Number, Mode=OneWay}"/>
                                    <Run Text=" "/>
                                    <Run Text="{Binding Name, Mode=OneWay}" />
                                </TextBlock>
                                <TextBlock Visibility="{Binding DiscrepancyCount, Converter={StaticResource CollapsedWhen0}}">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="FontWeight" Value="Bold"/>
                                            <Setter Property="Foreground" Value="Red"/>
                                        </Style>
                                    </TextBlock.Style>
                                    <Run Text=" – "/>
                                    <Run Text="{StaticResource DiscrepanciesSym}"/>
                                    <Run Text="{Binding DiscrepancyCount, Mode=OneWay}"/>
                                </TextBlock>
                            </StackPanel>
                        </HierarchicalDataTemplate>
                        <Style TargetType="TreeViewItem">
                            <Setter Property="HorizontalAlignment" Value="Left"/>
                        </Style>
                    </TreeView.Resources>
                </TreeView>
            </Grid>

            <Grid x:Name="CharacterGrid" Grid.Row="0" 
                          Visibility="Collapsed">
                <Grid.RowDefinitions>
                    <!-- Header changes -->
                    <RowDefinition Height="Auto"/>
                    <!-- Character listview -->
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <StackPanel Grid.Row="0" 
                            Orientation="Horizontal">
                    <StackPanel.Margin>
                        <Thickness Bottom="{StaticResource VerticalSpacer}"/>
                    </StackPanel.Margin>
                    <TextBlock VerticalAlignment="Center">
                        <Run Text="Characters"/>
                    </TextBlock>
                    <Button x:Name="BackFromCharactersButton"
                             Content="Back to Overview"
                             Click="BackFromCharactersButton_Click"/>
                </StackPanel>
                
                <DataGrid x:Name="CharacterDGrid" 
                          Grid.Row="1"
                          AutoGenerateColumns="False"
                          CanUserAddRows="False"
                          CanUserDeleteRows="False"
                          CanUserSortColumns="False">
                    <DataGrid.Resources>
                        <Style TargetType="DataGridCell">
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Foreground" Value="Black"/>
                                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.AccentColorLight3BrushKey}}"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.AccentColorDark1BrushKey}}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.Resources>
                    
                    <DataGrid.Columns>
                        <DataGridTemplateColumn Header="Character">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Vertical">
                                        <TextBlock Text="{Binding Name}"/>
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock x:Name="RowDiscrepancyCount" 
                                                Visibility="{Binding DiscrepancyCount, Converter={StaticResource CollapsedWhen0}}">
                                                <TextBlock.Style>
                                                    <Style TargetType="TextBlock">
                                                        <Setter Property="FontWeight" Value="Bold"/>
                                                        <Setter Property="Foreground" Value="Red"/>
                                                    </Style>
                                                </TextBlock.Style>
                                                <Run Text="{StaticResource DiscrepanciesSym}"/>
                                                <Run Text="{Binding DiscrepancyCount}"/>
                                                <Run Text=" "/>
                                            </TextBlock>
                                            <TextBlock x:Name="RowChangesPending"
                                                       Visibility="{Binding ChangesPending, Converter={StaticResource CollapsedWhen0}}">
                                                <Run Text="{StaticResource HasChangesPendingSym}"/>
                                                <Run Text="{Binding ChangesPending}"/>
                                            </TextBlock>
                                        </StackPanel>
                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTextColumn Header="ID" IsReadOnly="True" Binding="{Binding Id}"/>
                        <!-- Data colums will be added in Code Behind -->
                    </DataGrid.Columns>
                </DataGrid>
            </Grid>
            
            <!-- More grids to follow -->
        </Grid>
    </Grid>
</Window>
